{
  "Native": {
    "openapp": "Open App",
    "choosefrommenu": "Choose from Menu",
    "handoff": "Continue in Shortcuts App",
    "exit": "Exit Shortcut",
    "conditional": "If",
    "repeat.count": "Repeat",
    "repeat.each": "Repeat with Each",
    "delay": "Wait",
    "waittoreturn": "Wait to Return",
    "dictionary": "Dictionary",
    "detect.dictionary": "Get Dictionary from Input",
    "getvalueforkey": "Get Value in Dictionary",
    "setvalueforkey": "Set Value in Dictionary",
    "base64encode": "Base64 Encode",
    "hash": "Generate Hash",
    "count": "Count",
    "getitemname": "Get Name",
    "getitemtype": "Get Type",
    "setitemname": "Set Name",
    "viewresult": "View Content Graph",
    "choosefromlist": "Choose from List",
    "getitemfromlist": "Get Item from List",
    "list": "List",
    "math": "Calculate",
    "calculateexpression": "Calculate Expression",
    "statistics": "Calculate Statistics",
    "number.round": "Round Number",
    "measurement.convert": "Convert Measurement",
    "measurement.create": "Measurement",
    "comment": "Comment",
    "nothing": "Nothing",
    "ask": "Ask for Input",
    "format.filesize": "Format File Size",
    "format.number": "Format Number",
    "detect.number": "Get Numbers from Input",
    "number": "Number",
    "detect.numbers": "Get Numbers from Input",
    "number.random": "Random Number",
    "runsshscript": "Run Script Over SSH",
    "getmyworkflows": "Get My Shortcuts",
    "openworkflow": "Open Shortcut",
    "runworkflow": "Run Shortcut",
    "appendvariable": "Add to Variable",
    "getvariable": "Get Variable",
    "setvariable": "Set Variable",
    "openxcallbackurl": "Open X-Callback URL",
    "urlencode": "URL Encode",
    "Editorial.runworkflow": "Run Editorial Workflow",
    "addframetogif": "Add Frame to GIF",
    "getframesfromimage": "Get Frames from Image",
    "makegif": "Make GIF",
    "makevideofromgif": "Make Video from GIF",
    "image.combine": "Combine Images",
    "image.crop": "Crop Image",
    "image.flip": "Flip Image",
    "image.mask": "Mask Image",
    "image.overlay": "Overlay Image",
    "image.resize": "Resize Image",
    "image.rotate": "Rotate Image",
    "image.convert": "Convert Image",
    "filter.images": "Filter Images",
    "properties.images": "Get Details of Images",
    "detect.images": "Get Images from Input",
    "encodemedia": "Encode Media",
    "trimvideo": "Trim Media",
    "imgur.upload": "Upload to Imgur",
    "lightroom.import": "Import to Lightroom",
    "showinblindsquare": "Show in BlindSquare",
    "openin": "Open In [App]",
    "previewdocument": "Quick Look",
    "showresult": "Show Result",
    "makepdf": "Make PDF",
    "print": "Print",
    "generatebarcode": "Generate QR Code",
    "scanbarcode": "Scan QR/Bar Code",
    "gethtmlfromrichtext": "Make HTML from Rich Text",
    "getmarkdownfromrichtext": "Make Markdown from Rich Text",
    "getrichtextfromhtml": "Make Rich Text from HTML",
    "getrichtextfrommarkdown": "Make Rich Text from Markdown",
    "dictatetext": "Dictate Text",
    "getnameofemoji": "Get Name of Emoji",
    "detect.text": "Get Text from Input",
    "showdefinition": "Show Definition",
    "speaktext": "Speak Text",
    "gettext": "Text",
    "text.changecase": "Change Case",
    "text.combine": "Combine Text",
    "correctspelling": "Correct Spelling",
    "text.match.getgroup": "Get Group from Match Text",
    "text.match": "Match Text",
    "text.replace": "Replace Text",
    "text.split": "Split Text",
    "detectlanguage": "Detect Language with Microsoft",
    "text.translate": "Translate Text with Microsoft",
    "evernote.append": "Append to Evernote",
    "evernote.new": "Create New Note (Evernote)",
    "evernote.delete": "Delete Notes (Evernote)",
    "evernote.getlink": "Get Note Link (Evernote)",
    "evernote.get": "Get Notes (Evernote)",
    "goodreader.open": "Open in GoodReader",
    "share": "Share",
    "runextension": "Share With Extension",
    "cloudapp.upload": "Upload to CloudApp",
    "postonfacebook": "Post on Facebook",
    "burbn.instagram.openin": "Post on Instagram",
    "tumblr.post": "Post on Tumblr",
    "whatsapp.WhatsApp.send": "Send Message via WhatsApp",
    "whatsapp.WhatsApp.openin": "Send Photo via WhatsApp",
    "wordpress.post": "Post to WordPress",
    "giphy": "Search Giphy",
    "rss": "Get Items from RSS Feed",
    "rss.extract": "Get RSS Feed from Page",
    "url.expand": "Expand URL",
    "geturlcomponent": "Get Component of URL",
    "detect.link": "Get URLs from Input",
    "url": "URL",
    "downloadurl": "Get Contents of URL",
    "getwebpagecontents": "Get Contents of Web Page",
    "url.getheaders": "Get Headers of URL",
    "AmazonLinker.convert": "Convert URL with Associate",
    "AmazonLinker.search": "Search in Associate",
    "instapaper.add": "Add to Instapaper",
    "instapaper.get": "Get Instapaper Bookmarks",
    "Opener.show-options": "Open URL in Opener",
    "Pythonista.runscript": "Run Script (Pythonista)",
    "Pythonista.editscript": "Edit Script (Pythonista)",
    "Tally2.get": "Get Tally (Tally)",
    "Tally2.updatetally": "Update Tally (Tally)",
    "overcast.add": "Add to Overcast",
    "pinboard.add": "Add to Pinboard",
    "pinboard.get": "Get Pinboard Bookmarks",
    "pocket.add": "Add to Pocket"
  },
  "Third-Party Apps": {
    "Tweetbot": {
      "tapbots.Tweetbot6.PTHTweetbotOpenTwitterURLIntent": "Open Twitter (Tweetbot)",
      "tapbots.Tweetbot6.PTHTweetbotOpenIntent": "Open Tweetbot",
      "tapbots.Tweetbot6.PTHTweetbotPostTweetIntent": "Post Tweet (Tweetbot)",
      "tapbots.Tweetbot.searchtext": "Search Text (Tweetbot)",
      "tapbots.Tweetbot.opentweetbot": "Open Tweetbot (Tweetbot)",
      "tapbots.Tweetbot.tweet": "Tweet (Tweetbot)",
      "tapbots.Tweetbot.viewprofile": "View Profile (Tweetbot)"
    },
    "Pocket": {
      "pocket.get": "Get Items from Pocket"
    },
    "Apple Pay": {
      "venmo.request": "Request Payment (Venmo)",
      "venmo.pay": "Send Payment (Venmo)"
    },
    "Venmo": {
      "kortina.labs.Venmo": "Send/Request Payment (Venmo)"
    },
    "GitHub": {
      "github.stormbreaker.prod.DispatchWorkflowIntent": "Dispatch Workflow (GitHub)"
    },
    "Data Jar": {
      "dk.simonbs.DataJar.InsertValueInArrayIntent": "Add to Data Jar (Data Jar)",
      "dk.simonbs.DataJar.CheckIfValueExistsIntent": "Check if Value Exists (Data Jar)",
      "dk.simonbs.DataJar.GetChildCountIntent": "Count Values (Data Jar)",
      "dk.simonbs.DataJar.DeleteValueIntent": "Delete Value (Data Jar)",
      "dk.simonbs.DataJar.GetKeysIntent": "Get Keys (Data Jar)",
      "dk.simonbs.DataJar.GetTypeOfValueIntent": "Get Type of Value (Data Jar)",
      "dk.simonbs.DataJar.GetValueIntent": "Get Value (Data Jar)",
      "dk.simonbs.DataJar.SetValueIntent": "Set Value (Data Jar)",
      "dk.simonbs.DataJar.ViewValueIntent": "View Value (Data Jar)"
    },
    "Jayson": {
      "dk.simonbs.Jayson.GetFileIntent": "Get File (Jayson)",
      "dk.simonbs.Jayson.PrettifyJSONIntent": "Prettify JSON (Jayson)",
      "dk.simonbs.Jayson.ViewJSONIntent": "View JSON (Jayson)"
    },
    "Scriptable": {
      "dk.simonbs.Scriptable.CreateFileBookmarkIntent": "Create File Bookmark (Scriptable)",
      "dk.simonbs.Scriptable.RefreshAllWidgetsIntent": "Refresh All Widgets (Scriptable)",
      "dk.simonbs.Scriptable.RunScriptInlineIntent": "Run Inline Script (Scriptable)",
      "dk.simonbs.Scriptable.ParameterizedRunScriptIntent": "Run Script (Scriptable)"
    },
    "Toolbox Pro": {
      "alexhay.ToolboxProForShortcuts.AddTracksToPlaylistIntent": "Add Tracks To Playlist (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.AddContactGroupIntent": "Add Contact (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.AuthenticateIntent": "Authenticate (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.BlurImagesIntent": "Blur Image (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.BookmarkFileIntent": "Bookmark File (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.BuildURLIntent": "Build URL (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CalculateWithSoulverIntent": "Calculate With Soulver (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CheckIfInstalledIntent": "Check If App Is Installed (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CheckGVIntent": "Check If Global Variable Exists (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CheckForUpdatesIntent": "Check RoutineHub For Updates (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.ConvertCurrencyIntent": "Convert Currency (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CreateCalendarIntent": "Create Calendar (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CreateEventIntent": "Create Calendar Event (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CreateFoldersIntent": "Create Folders (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CreateIconIntent": "Create Icon (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CreateTextImageIntent": "Create Image From Text (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CreateInterestHeatMapsIntent": "Create Interest Heatmaps (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CreateMenuIntent": "Create Menu (Toolbox Pro)",
      "alexhay.ToolboxProForShortcuts.CreatePlaylistIntent": "Create Playlist (Toolbox Pro)"
    },
    "Working Copy": {
      "appliedphasor.working-copy.CheckoutBranchIntent": "Checkout Branch (Working Copy)",
      "appliedphasor.working-copy.CloneRepositoryIntent": "Clone Repository (Working Copy)",
      "appliedphasor.working-copy.CommitRepositoryIntent": "Commit Repository (Working Copy)",
      "appliedphasor.working-copy.CreateBranchIntent": "Create Branch (Working Copy)",
      "appliedphasor.working-copy.OpenPullRequestIntent": "Create Pull Request (Working Copy)",
      "appliedphasor.working-copy.DeleteBranchIntent": "Delete Branch (Working Copy)",
      "appliedphasor.working-copy.FileDetailsIntent": "Details of Repository Files (Working Copy)",
      "appliedphasor.working-copy.FetchRepositoryIntent": "Fetch Repository (Working Copy)",
      "appliedphasor.working-copy.GetFilesIntent": "Get Repository Files (Working Copy)",
      "appliedphasor.working-copy.ListRepositoriesIntent": "List Repositories (Working Copy)",
      "appliedphasor.working-copy.MergeBranchIntent": "Merge Branch (Working Copy)",
      "appliedphasor.working-copy.OpenIntent": "Open in Working Copy (Working Copy)",
      "appliedphasor.working-copy.PullRepositoryIntent": "Pull Repository (Working Copy)",
      "appliedphasor.working-copy.PushRepositoryIntent": "Push Repository (Working Copy)",
      "appliedphasor.working-copy.CommitLogIntent": "Repository History (Working Copy)",
      "appliedphasor.working-copy.ListReferencesIntent": "Repository References (Working Copy)",
      "appliedphasor.working-copy.StageFilesIntent": "Stage for Commit (Working Copy)",
      "appliedphasor.working-copy.WebDAVIntent": "Toggle WebDAV Server (Working Copy)",
      "appliedphasor.working-copy.WriteFileIntent": "Write Repository File (Working Copy)"
    },
    "Jellycuts": {
      "zlineman.Jellyfish.GrabJellycutIntent": "Grab Jellycut (Jellycuts)",
      "zlineman.Jellyfish.ImportObjectsIntent": "Import Objects (Jellycuts)",
      "zlineman.Jellyfish.ImportShortcutIntent": "Import Shortcut (Jellycuts)"
    },
    "Otter": {
      "aisense.otter.CommentIntent": "Comment (Otter)",
      "aisense.otter.HighlightIntent": "Highlight (Otter)",
      "aisense.otter.RecordStartParameterizedIntent": "Start Recording (Otter)",
      "aisense.otter.RecordStopIntent": "Stop Recording (Otter)"
    },
    "ProtonMail": {
      "ch.protonmail.WipeMainKeyIntent": "Wipe Local Data (ProtonMail)"
    },
    "GizmoPack": {
      "ke.bou.GizmoPack.AddWalletPassIntent": "Add Wallet Pass (GizmoPack)",
      "ke.bou.GizmoPack.CombineListsIntent": "Combine Lists (GizmoPack)",
      "ke.bou.GizmoPack.CreateWalletPassIntent": "Create Wallet Pass (GizmoPack)",
      "ke.bou.GizmoPack.FileInfoIntent": "File Info (GizmoPack)",
      "ke.bou.GizmoPack.FilterDictionariesIntent": "Filter Dictionaries (GizmoPack)",
      "ke.bou.GizmoPack.FuzzyFinderIntent": "Fuzzy Finder (GizmoPack)",
      "ke.bou.GizmoPack.GenerateCSVIntent": "Generate CSV (GizmoPack)",
      "ke.bou.GizmoPack.HashDataIntent": "Generate Hash (Extended) (GizmoPack)",
      "ke.bou.GizmoPack.EncodeHexIntent": "Encode Hex (GizmoPack)",
      "ke.bou.GizmoPack.EncodePlistIntent": "Encode Property List (GizmoPack)",
      "ke.bou.GizmoPack.OverwriteFileIntent": "Overwrite File (GizmoPack)",
      "ke.bou.GizmoPack.ParseCSVIntent": "Parse CSV (GizmoPack)",
      "ke.bou.GizmoPack.ParseDateIntent": "Parse Date (GizmoPack)",
      "ke.bou.GizmoPack.QueryJSONIntent": "Query JSON with JSONPath/jq (GizmoPack)",
      "ke.bou.GizmoPack.QueryRecordsIntent": "Query CSV/Dictionaries with SQL (GizmoPack)",
      "ke.bou.GizmoPack.RandomDataIntent": "Random Data (GizmoPack)",
      "ke.bou.GizmoPack.QueryDocumentIntent": "Scrape HTML/XML with CSS/XPath (GizmoPack)",
      "ke.bou.GizmoPack.ShortcutMetadataIntent": "Shortcut Metadata (GizmoPack)",
      "ke.bou.GizmoPack.SignJWTIntent": "Sign JSON Web Token (GizmoPack)",
      "ke.bou.GizmoPack.SnapshotMapIntent": "Snapshot Map (GizmoPack)",
      "ke.bou.GizmoPack.TrimFileIntent": "Trim File (GizmoPack)",
      "ke.bou.GizmoPack.UniversalVariablesIntent": "Universal Variables (GizmoPack)"
    },
    "ShortWeb": {
      "ch.ada.ShortWeb.GetResultIntent": "Get Automation Output (ShortWeb)",
      "ch.ada.ShortWeb.RunAutomationIntent": "Run Automation (ShortWeb)"
    },
    "Fantastical": {
      "flexibits.fantastical2.addreminder": "Add Reminder (Fantastical)",
      "flexibits.fantastical2.showinfantastical": "Show in Fantastical",
      "flexibits.fantastical2.addevent": "Add Event (Fantastical)",
      "flexibits.fantastical2.iphone.FKRChangeCalendarSetIntent": "Change Calendar Set (Fatastical)",
      "flexibits.fantastical2.iphone.FKRChangeCalendarViewInten": "Change View (Fantastical)",
      "flexibits.fantastical2.iphone.FKRCreateFromInputIntent": "Create From Input (Fantastical)",
      "flexibits.fantastical2.iphone.FKRGetAttendeesFromEventIntent": "Get Invitees From Event (Fantastical)",
      "flexibits.fantastical2.iphone.FKROpenOnDateIntent": "Open On Date (Fantastical)",
      "flexibits.fantastical2.iphone.FKROverdueRemindersIntent": "Overdue Reminders (Fantastical)",
      "flexibits.fantastical2.iphone.FKRShowCalendarIntent": "Show Calendar (Fantastical)",
      "flexibits.fantastical2.iphone.FKRShowListIntent": "Show List (Fantastical)",
      "flexibits.fantastical2.iphone.FKRShowScheduleIntent": "Show Schedule (Fantastical)",
      "flexibits.fantastical2.iphone.FKRUpcomingCalendarItemIntent": "Upcoming Item (Fantastical)"
    },
    "Day One": {
      "bloombuilt.dayone-ios.AnswerDailyPromptIntent": "Answer Daily Prompt (Day One)",
      "bloombuilt.dayone-ios.AppendToEntryIntent": "Append to Entry (Day One)",
      "dayonelog.dayoneiphone.post": "Create Day One Entry (Day One)",
      "bloombuilt.dayone-ios.CreateEntryIntent": "Create Entry (Day One)",
      "bloombuilt.dayone-ios.CreateTemplateEntryIntent": "Create Template Entry (Day One)",
      "bloombuilt.dayone-ios.EditEntryIntent": "Edit Entry (Day One)",
      "bloombuilt.dayone-ios.FindEntriesIntent": "Find Entries (Day One)",
      "bloombuilt.dayone-ios.GetDailyPromptIntent": "Get Daily Prompt (Day One)",
      "bloombuilt.dayone-ios.RecordIntent": "Record (Day One)",
      "bloombuilt.dayone-ios.ShowTodayIntent": "Show Day Summary (Day One)",
      "bloombuilt.dayone-ios.ShowEntriesIntent": "Show Entries (Day One)",
      "bloombuilt.dayone-ios.ShowDayIntent": "Show On This Day (Day One)"
    },
    "Tally": {
      "agiletortoise.Tally2.get": "Get Tally (Tally)",
      "agiletortoise.Tally2.updatetally": "Update Tally (Tally)"
    },
    "Uber": {
      "ubercab.UberClient.requestuber": "Request Uber"
    },
    "Unknown": {
      "runscene": "Run Home Scene"
    },
    "DeskConnect": {
      "deskconnect.send": "Send via DeskConnect"
    },
    "IFTTT": {
      "actions.ifttt": "Trigger IFTTT Applet"
    },
    "Slack": {
      "slack.send": "Post to Slack"
    },
    "Trello": {
      "trello.get": "Get Trello Items",
      "properties.trello": "Get Details of Trello Item",
      "trello.add.list": "Create Trello List",
      "trello.add.board": "Create Trello Board",
      "trello.add.card": "Add Trello Card"
    },
    "Ulysses": {
      "properties.ulysses.sheet": "Get Details of Ulysses Sheet"
    },
    "Todoist": {
      "todoist.add": "Add Todoist Item"
    },
    "Messenger": {
      "facebook.messenger.send": "Send via Messenger"
    },
    "Charty": {
      "brogrammers.charty.AccumulateValuesIntent": "Accumulate Values (Charty)",
      "brogrammers.charty..AddAverageIntent": "Add Average (Charty)",
      "brogrammers.charty.AddCustomThemeIntent": "Add Custom Theme (Charty)",
      "brogrammers.charty.AddMovingAverageIntent": "Add Moving Average (Charty)",
      "brogrammers.charty.AddSeriesFromCSVIntent": "Add Series from CSV (Charty)",
      "brogrammers.charty.AddSeriesToChartIntent": "Add Series To Chart (Charty)",
      "brogrammers.charty.ApplyQuickStyleIntent": "Apply Quick Style (Charty)",
      "brogrammers.charty.CopyChartToClipboardIntent": "Copy Chart To Clipboard (Charty)",
      "brogrammers.charty.DeleteChartIntent": "Delete Chart (Charty)",
      "brogrammers.charty.DeleteSeriesIntent": "Delete Series (Charty)",
      "brogrammers.charty.ExportChartAsImageIntent": "Export Chart As Image (Charty)",
      "brogrammers.charty.FilterDataIntent": "Filter Data (Charty)",
      "brogrammers.charty.GetInfoAllChartsIntent": "Get Information From All Charts (Charty)",
      "brogrammers.charty.GroupDataIntent": "Group Data (Charty)",
      "brogrammers.charty.NewChartIntent": "New Chart (Charty)",
      "com.brogrammers.charty.NewChartWithSeriesIntent": "New Chart With Series (Charty)",
      "brogrammers.charty.StyleAxisIntent": "Style Axis (Charty)",
      "brogrammers.charty.StyleBarSeriesIntent": "Style Bar Series (Charty)",
      "brogrammers.charty.StyleChartIntent": "Style Chart (Charty)",
      "brogrammers.charty.StyleDonutPieSeriesIntent": "Style Donut/Pie Series (Charty)",
      "brogrammers.charty.StyleLineSeriesIntent": "Style Line Series (Charty)",
      "brogrammers.charty.StyleRingSeriesIntent": "Style Ring Series (Charty)",
      "brogrammers.charty.StyleScatterSeriesIntent": "Style Scatter Series (Charty)",
      "brogrammers.charty.UpdateWidgetsIntent": "Update Widgets (Charty)"
    },
    "Neeva": {
      "co.neeva.app.ios.browser.OpenURLIntent": "Open URL (Neeva)",
      "co.neeva.app.ios.browser.SearchNeevaIntent": "Search Neeva (Neeva)"
    },
    "a-Shell": {
      "AsheKube.app.a-Shell.ExecuteCommandIntent": "Execute Command (a-Shell)",
      "AsheKube.app.a-Shell.GetFileIntent": "Get File (a-Shell)",
      "AsheKube.app.a-Shell.PutFileIntent": "Put File (a-Shell)"
    },
    "2Do": {
      "guidedways.2Do.add": "Add 2Do Task (2Do)"
    },
    "Airmail": {
      "airmailapp.iphone.AMSearchMailIntent": "Search Mail (Airmail)",
      "airmailapp.iphone.AMSendEmailIntent": "Send Email (Airmail)"
    },
    "App in the Air": {
      "aita.app.SearchFlightsForBookingIntent": "Search flights for booking (App in the Air)"
    },
    "Bear": {
      "shinyfrog.bear-iOS.SFAddFilesToNoteIntent": "Add files to note (Bear)",
      "shinyfrog.bear-iOS.SFAddTagsToNoteIntent": "Add tags to note (Bear)",
      "shinyfrog.bear-iOS.SFAddToNoteIntent": "Add text to a note (Bear)",
      "shinyfrog.bear-IOS.add": "Add to Bear Note (Bear)",
      "shinyfrog.bear-iOS.SFArchiveNoteIntent": "Archive note (Bear)",
      "shinyfrog.bear-IOS.create": "Create Bear Note (Bear)",
      "shinyfrog.bear-IOS.grab": "Create Bear Note from URL (Bear)",
      "shinyfrog.bear-iOS.SFCreateNoteIntent": "Create Note (Bear)",
      "shinyfrog.bear-iOS.SFCreateNoteFromURLIntent": "Create note from URL (Bear)",
      "shinyfrog.bear-IOS.contents": "Get Contents of Bear Note (Bear)",
      "shinyfrog.bear-iOS.SFGetNoteIntent": "Get note (Bear)",
      "shinyfrog.bear-iOS.SFGetNoteFilesIntent": "Get note files (Bear)",
      "shinyfrog.bear-iOS.SFGetTagIntent": "Get tag (Bear)",
      "shinyfrog.bear-IOS.open": "Open Bear Note (Bear)",
      "shinyfrog.bear-iOS.SFOpenNoteIntent": "Open note (Bear)",
      "shinyfrog.bear-iOS.SFOpenLocationIntent": "Open section (Bear)",
      "shinyfrog.bear-iOS.SFOpenTagIntent": "Open Tag (Bear)",
      "shinyfrog.bear-iOS.SFPinNoteIntent": "Pin note (Bear)",
      "shinyfrog.bear-IOS.search": "Search in Bear (Bear)",
      "shinyfrog.bear-iOS.SFSearchNotesIntent": "Search notes (Bear)",
      "shinyfrog.bear-iOS.SFSearchTagsIntent": "Search tags (Bear)",
      "shinyfrog.bear-iOS.SFTrashNoteIntent": "Trash note (Bear)"
    },
    "LibTerm": {
      "ch.marcela.ada.LibTerm.RunCommandIntent": "Run Command (LibTerm)"
    },
    "Buffer": {
      "buffer.buffer.EditChannelScheduleIntent": "Add Channel Posting Times (Buffer)",
      "buffer.buffer.CreatePostIntent": "Create Post (Buffer)",
      "buffer.buffer.SelectProfileIntent": "Get Channel (Buffer)",
      "buffer.buffer.PauseAllChannelsIntent": "Pause All Channels (Buffer)",
      "buffer.buffer.PauseChannelIntent": "Pause Channel (Buffer)",
      "buffer.buffer.QueueCountIntent": "Queue Count (Buffer)"
    },
    "ChargePoint": {
      "coulomb.ChargePoint.CPTJoinWaitlistIntent": "Join Waitlist (ChargePoint)"
    },
    "Castro": {
      "co.supertop.Castro-2.AdjustPlaybackSpeedIntent": "Adjust Playback Position (Castro)",
      "co.supertop.Castro-2.AdjustQueuePositionIntent": "Adjust Queue Position (Castro)",
      "co.supertop.Castro-2.ChapterControlIntent": "Chapter Skipping (Castro)",
      "co.supertop.Castro-2.ClearEpisodeIntent": "Clear Episode (Castro)",
      "co.supertop.Castro-2.GetQueuedEpisodesIntent": "Get Queued Episodes (Castro)",
      "co.supertop.Castro-2.GetNowPlayingEpisodeDetailsIntent": "Get Now Playing Episode (Castro)",
      "co.supertop.Castro-2.SearchTentaclesIntent": "Search Podcasts (Castro)",
      "co.supertop.Castro-2.SetPlaybackSpeedIntent": "Set Playback Speed (Castro)",
      "co.supertop.Castro-2.SubscribeIntent": "Subscribe To Show (Castro)",
      "co.supertop.Castro-2.ToggleContinuousPlayIntent": "Toggle Continuous Play (Castro)",
      "co.supertop.Castro-2.ToggleEnhanceVoicesIntent": "Toggle Enhance Videos (Castro)",
      "co.supertop.Castro-2.ToggleTrimSilenceIntent": "Toggle Trim Silence (Castro)"
    },
    "Daily Dictionary": {
      "anthonymayo.DailyDictionary.ShowDailyWordIntent": "Word of the Day (Daily Dictionary)"
    },
    "Deliveries": {
      "junecloud.Deliveries.JUNAddDeliveryIntent": "Add a delivery (Deliveries)",
      "junecloud.Deliveries.JUNShowDeliveriesIntent": "Check my deliveries (Deliveries)",
      "junecloud.Deliveries.JUNNextDeliveryIntent": "Check my next delivery (Deliveries)",
      "junecloud.Deliveries.JUNCheckDeliveryIntent": "Check on a delivery (Deliveries)"
    },
    "CARROT": {
      "grailr.CARROTweather.CurrentForecastIntent": "Get Weather Report (CARROT)"
    },
    "Pushcut": {
      "pushcut.Pushcut.CancelNotificationIntent": "Cancel Notification (Pushcut)",
      "pushcut.Pushcut.CancelServerActionIntent": "Cancel Server Action (Pushcut)",
      "pushcut.Pushcut.ExecuteServerActionIntent": "Execute Server Action (Pushcut)",
      "pushcut.Pushcut.RunShortcutIntent": "Schedule Shortcut (Pushcut)",
      "pushcut.Pushcut.SendNotificationIntent": "Send Notification (Pushcut)",
      "pushcut.Pushcut.ShowNotificationIntent": "Show Notification (Pushcut)",
      "pushcut.Pushcut.ChangeWidgetContentIntent": "Update Widget (Pushcut)",
      "pushcut.Pushcut.UploadImageIntent": "Upload Image (Pushcut)"
    },
    "Shortcutify": {
      "shortcutify.Shortcutify.AirtableListRecordsIntent": "Airtable: Insert Record (Shortcutify)",
      "shortcutify.Shortcutify.AirtableRetrieveRecordIntent": "Airtable: List Records (Shortcutify)",
      "shortcutify.Shortcutify.CoinbaseListAccountsIntent": "Coinbase: List Accounts (Shortcutify)",
      "shortcutify.Shortcutify.GoogledriveDownloadFileIntent": "Google Drive: Download File (Shortcutify)",
      "shortcutify.Shortcutify.GoogledriveGetFileIntent": "Google Drive: Get File (Shortcutify)",
      "shortcutify.Shortcutify.GoogledriveGetFilesListIntent": "Google Drive: Get Files List (Shortcutify)",
      "shortcutify.Shortcutify.GoogledriveUploadFileIntent": "Google Drive: Upload File (Shortcutify)",
      "shortcutify.Shortcutify.GoogleMapsGetDirectionsIntent": "Google Maps: Get Directions (Shortcutify)",
      "shortcutify.Shortcutify.LifxActivateSceneIntent": "Lifx: Activate Scene (Shortcutify)",
      "shortcutify.Shortcutify.LifxSetLightStateIntent": "Lifx: Set Light State (Shortcutify)",
      "shortcutify.Shortcutify.LifxSetPowerStateIntent": "Lifx: Set Power State (Shortcutify)",
      "shortcutify.Shortcutify.LifxTogglePowerIntent": "Lifx: Toggle Power (Shortcutify)",
      "shortcutify.Shortcutify.MacCaptureScreenVideoIntent": "macOS: Capture Screen Video (Shortcutify)",
      "shortcutify.Shortcutify.MacCaptureScreenshotIntent": "macOS: Capture Screenshot (Shortcutify)",
      "shortcutify.Shortcutify.MacLockScreenIntent": "macOS: Lock Screen (Shortcutify)",
      "shortcutify.Shortcutify.MacSleepIntent": "macOS: Sleep (Shortcutify)",
      "shortcutify.Shortcutify.MacTriggerKeyboardShortcutIntent": "macOS: Trigger Keyboard Shortcut (Shortcutify)",
      "shortcutify.Shortcutify.MacUploadFileIntent": "macOS: Upload File (Shortcutify)",
      "shortcutify.Shortcutify.MacWakeIntent": "macOS: Wake (Shortcutify)",
      "shortcutify.Shortcutify.MacWakeAndLogInIntent": "macOS: Wake and Log in (Shortcutify)",
      "shortcutify.Shortcutify.ShortcutifyConvertToOptionItemIntent": "Shortcutify: Convert to Option Item (Shortcutify)",
      "shortcutify.Shortcutify.SightengineGetImageFilePropertiesIntent": "Sightengine: Get image file properties (Shortcutify)",
      "shortcutify.Shortcutify.SightengineGetImageUrlPropertiesIntent": "Sightengine: Get image url properties (Shortcutify)",
      "shortcutify.Shortcutify.SpotifyAddTrackToPlaylistIntent": "Spotify: Add Track to Playlist (Shortcutify)",
      "shortcutify.Shortcutify.SpotifyGetCurrentlyPlayingTrackIntent": "Spotify: Get Currently Playing Track (Shortcutify)",
      "shortcutify.Shortcutify.SpotifyGetMyPlaylistsIntent": "Spotify: Get My Playlists (Shortcutify)",
      "shortcutify.Shortcutify.SpotifyPlayPauseIntent": "Spotify: Play - Pause (Shortcutify)",
      "shortcutify.Shortcutify.SpotifyPlaySpotifyURLIntent": "Spotify: Play Spotify URL (Shortcutify)",
      "shortcutify.Shortcutify.SpotifySearchAndPlayOnSpotifyIntent": "Spotify: Search and Play on Spotify (Shortcutify)",
      "shortcutify.Shortcutify.SpotifySetRepeatModeIntent": "Spotify: Set Repeat Mode (Shortcutify)",
      "shortcutify.Shortcutify.SpotifyToggleShuffleIntent": "Spotify: Toggle Shuffle (Shortcutify)",
      "shortcutify.Shortcutify.SpotifyTransferPlaybackIntent": "Spotify: Transfer Playback (Shortcutify)",
      "shortcutify.Shortcutify.SpotifyUploadPlaylistCoverImageIntent": "Spotify: Upload Playlist Cover Image (Shortcutify)",
      "shortcutify.Shortcutify.TodoistAddProjectIntent": "Todoist: Add Project (Shortcutify)",
      "shortcutify.Shortcutify.TodoistAddTaskToProjectIntent": "Todoist: Add Task to Project (Shortcutify)",
      "shortcutify.Shortcutify.TodoistGetProjectTasksIntent": "Todoist: Get Project Tasks (Shortcutify)",
      "shortcutify.Shortcutify.TodoistGetProjectsIntent": "Todoist: Get Projects (Shortcutify)",
      "shortcutify.Shortcutify.TodoistQuickAddTaskIntent": "Todoist: Quick Add Task (Shortcutify)"
    },
    "Twitter": {
      "tweet": "Tweet (Twitter)"
    },
    "Ai Launcher": {
      "vitalek.IconFor.Contact.WidgetRowLauncherIntent": "Widget Launcher (Ai Launcher)",
      "vitalek.IconFor.Contact.WidgetLauncherIntent": "Widget Launcher (Ai Launcher)"
    },
    "FineReader": {
      "abbyy.finescanner.AFSGetPDFForDocumentIntent": "Get PDF (FineReader)",
      "abbyy.finescanner.AFSGetRecognizedDocumentIntent": "Get Recognized Document (FineReader)"
    },
    "Focus": {
      "laser-focused.focus-ios.ControlSessionIntent": "Control Session (Focus)",
      "laser-focused.focus-ios.StartSessionIntent": "Start Timer (Focus)"
    },
    "Night Sky X": {
      "icandiapps.nightsky.RecognizeObjectIntent": "Recognized Object (Night Sky X)",
      "icandiapps.nightsky.ShowObjectIntent": "Show Object (Night Sky X)",
      "icandiapps.nightsky.StartMindfulnessIntent": "Start Night Sky Mindfulness (Night Sky X)"
    },
    "NS": {
      "ns.reisplannerxtra.FavoriteWidgetConfigurationIntent": "Favorites widget configuration (NS)"
    },
    "OmniFocus 3": {
      "omnigroup.OmniFocus3.iOS.AddTaskIntent": "Add Item (OmniFocus 3)",
      "omnigroup.OmniFocus3.iOS.AddTaskPaperIntent": "Add TaskPaper (OmniFocus 3)",
      "omnigroup.OmniFocus3.iOS.FindTasksIntent": "Find Items (OmniFocus 3)",
      "omnigroup.OmniFocus3.iOS.FindProjectsIntent": "Find Projects (OmniFocus 3)",
      "omnigroup.OmniFocus3.iOS.FindTagsIntent": "Find Tags (OmniFocus 3)",
      "omnigroup.OmniFocus3.iOS.GetDatabaseObjectFromInputIntent": "Get Database Object Result from Input (OmniFocus 3)",
      "omnigroup.OmniFocus3.iOS.RunPlugInIntent": "Omni Automation Plug-In (OmniFocus 3)",
      "omnigroup.OmniFocus3.iOS.RunOmniJSIntent": "Omni Automation Script (OmniFocus 3)",
      "omnigroup.OmniFocus3.iOS.ShowFromChoiceIntent": "Show in OmniFocus (OmniFocus 3)",
      "omnigroup.OmniFocus3.iOS.TodaysForecastIntent": "Today's Forecast (OmniFocus 3)"
    },
    "OTP Auth": {
      "de.cooperrs.Authenticator.ACCopyCodeIntent": "Copy Code (OTP Auth)"
    },
    "RECaf": {
      "joecieplinski.RECaf.LogCaffeineWithParametersIntent": "Log Caffeine (RECaf)"
    },
    "ServiceM8": {
      "servicem8.CallIntent": "Call Client (ServiceM8)",
      "servicem8.CheckoutIntent": "Check out of current job (ServiceM8)",
      "servicem8.ClockIntent": "Clock on (ServiceM8)",
      "servicem8.LunchIntent": "Lunch (ServiceM8)",
      "servicem8.SendMessageIntent": "Send text message (ServiceM8)",
      "servicem8.AfterHoursRoleIntent": "Set on call staff member (ServiceM8)",
      "servicem8.StartNextJobIntent": "Start next job (ServiceM8)",
      "servicem8.TakePhotoIntent": "Take job photo (ServiceM8)",
      "servicem8.ClientNameIntent": "View Client's name (ServiceM8)"
    },
    "SmartGym": {
      "smartgymapp.smartgym.ViewRoutineIntent": "View Student's Routine (SmartGym)",
      "smartgymapp.smartgym.WeekSummaryIntent": "Week's Summary (SmartGym)"
    },
    "SongShift": {
      "cpdigitaldarkroom.SongShift.OWDeezerIntent": "Open in Deezer (SongShift)",
      "cpdigitaldarkroom.SongShift.OWSpotifyIntent": "Open in Spotify (SongShift)",
      "cpdigitaldarkroom.SongShift.OWAppleMusicIntent": "Open in the Music app (SongShift)",
      "cpdigitaldarkroom.SongShift.OWTidalIntent": "Open in Tidal (SongShift)"
    },
    "Google Assistant": {
      "google.OPA.OPAAskGoogleIntent": "Ask Google (Assistant)"
    },
    "Google Chrome": {
      "google.chrome.ios.OpenInChromeIntent": "Open URLs in Chrome (Chrome)",
      "google.chrome.ios.OpenInChromeIncognitoIntent": "Open URLs in Chrome in Incognito (Chrome)",
      "google.chrome.ios.SearchInChromeIntent": "Search in Chrome (Chrome)"
    },
    "FallCall Lite": {
      "fallcall.fallcall-lite.SendHelpIntent": "Assistance Needed (FallCall Lite)"
    },
    "Fandango": {
      "fandango.fandango.UpcomingOrderIntent": "See My Ticket (Fandango)"
    },
    "JSBox": {
      "cyan.jsbox.RunJavaScriptIntent": "Run JavaScript (JSBox)",
      "cyan.jsbox.RunJSBoxIntent": "Run JSBox script (JSBox)",
      "cyan.jsbox.RunJSBoxUIIntent": "Run JSBox UI (JSBox)"
    },
    "LIFX": {
      "lifx.lifx.LFXLightThemeIntent": "Apply a Theme (LIFX)",
      "lifx.lifx.LFXCleanCycleIntent": "Clean Cycle (LIFX)",
      "lifx.lifx.LFXGetScenesIntent": "Get Scenes (LIFX)",
      "lifx.lifx.LFXGetLightsIntent": "List Lights (LIFX)",
      "lifx.lifx.LFXGetThemesIntent": "List Themes (LIFX)",
      "lifx.lifx.LFXLightSceneIntent": "Set a Scene (LIFX)",
      "lifx.lifx.LFXLightBrightnessIntent": "Set light brightness (LIFX)",
      "lifx.lifx.LFXLightColorIntent": "Set light color (LIFX)",
      "lifx.lifx.LFXLightPowerIntent": "Set light power (LIFX)",
      "lifx.lifx.LFXLightStateIntent": "Set light state (LIFX)"
    },
    "Zoho Invoice": {
      "zoho.zinvoice.CreateExpenseIntent": "Create Expense (Zoho Invoice)",
      "zoho.zinvoice.CreateInvoiceIntent": "Create Invoice (Zoho Invoice)",
      "zoho.zinvoice.CreateInvoiceFromTimesheetsIntent": "Create Invoice from timesheets (Zoho Invoice)",
      "zoho.zinvoice.CreateItemIntent": "Create Item (Zoho Invoice)",
      "zoho.zinvoice.FindInvoicesIntent": "Find Invoices (Zoho Invoice)",
      "zoho.zinvoice.FindTimesheetsIntent": "Find Timesheets (Zoho Invoice)",
      "zoho.zinvoice.GenerateInvoiceLinkIntent": "Generate public link for invoice (Zoho Invoice)",
      "zoho.zinvoice.GetCustomerDetailsIntent": "Get Customer Details (Zoho Invoice)",
      "zoho.zinvoice.RecordPaymentIntent": "Record Payment (Zoho Invoice)",
      "zoho.zinvoice.SearchCustomerIntent": "Search customers (Zoho Invoice)",
      "zoho.zinvoice.SearchItemIntent": "Search item (Zoho Invoice)",
      "zoho.zinvoice.SendInvoiceReminderIntent": "Search reminder for an invoice (Zoho Invoice)"
    }
  },
  "Apple Apps": {
    "Clock": {
      "apple.mobiletimer-framework.MobileTimerIntents.MTCreateAlarmIntent": "Create Alarm (Clock)",
      "apple.mobiletimer-framework.MobileTimerIntents.MTGetAlarmsIntent": "Get All Alarms (Clock)",
      "apple.mobiletimer-framework.MobileTimerIntents.MTToggleAlarmIntent": "Start Timer (Clock)",
      "timer.start": "Start Timer (Clock)"
    },
    "Pages": {
      "apple.Pages.TSADocumentCreateIntent": "Create Document (Pages)",
      "apple.Pages.TSADocumentOpenIntent": "Open Document (Pages)",
      "apple.Pages.TPDocumentBeginPresenterModeIntent": "Open Document in Presenter Mode (Pages)"
    },
    "Notes": {
      "apple.mobilenotes.SharingExtension": "Create Note (Notes)",
      "apple.mobilenotes.ICNotesFolderIntent": "Show Folder (Notes)",
      "appendnote": "Append to Note (Notes)",
      "mobilenotes.SharingExtension": "Create Note (Notes)",
      "filter.notes": "Find Notes (Notes)",
      "shownote": "Show Note (Notes)",
      "mobilenotes.ICNotesFolderIntent": "Show Notes Folder (Notes)"
    },
    "Mail": {
      "selectemail": "Select Email Address (Mail)",
      "email": "Email Addresses (Mail)",
      "detect.emailaddress": "Get Email Address from Input (Mail)",
      "sendemail": "Send Email (Mail)"
    },
    "Numbers": {
      "apple.Numbers.TNiOSAddValuesToFormIntent": "Add Records to Form (Numbers)",
      "apple.Numbers.TNiOSAddValuesToSpreadsheetIntent": "Add Row to Top or Bottom of Table (Numbers)",
      "apple.Numbers.TSADocumentCreateIntent": "Create Spreadsheet (Numbers)",
      "apple.Numbers.TSADocumentOpenIntent": "Open Spreadsheet (Numbers)"
    },
    "Keynote": {
      "apple.Keynote.TSADocumentCreateIntent": "Create Presentation (Keynote)",
      "apple.Keynote.KNiOSCreateNewOutlineIntent": "Create Presentation in Outline View (Keynote)",
      "apple.Keynote.TSADocumentOpenIntent": "Open Presentation (Keynote)",
      "apple.Keynote.KNDocumentRehearseIntent": "Open Presentation in Rehearsal Mode (Keynote)",
      "apple.Keynote.KNDocumentPlayIntent": "Play Presentation in Show Mode (Keynote)"
    },
    "FaceTime": {
      "TelephonyUtilities.PhoneIntentHandler": "FaceTime",
      "apple.facetime.facetime": "Facetime"
    },
    "Apple TV": {
      "TVRemoteUIService.LaunchScreenSaverIntent": "Launch Screensaver on Apple TV (Apple TV)",
      "TVRemoteUIService.TVWatchList": "Open App on Apple TV (Apple TV)",
      "TVRemoteUIService.LaunchApplicationIntent": "Open App on Apple TV (Apple TV)",
      "TVRemoteUIService.ToggleCaptionsIntent": "Set Captions (Apple TV)",
      "TVRemoteUIService.PauseContentIntent": "Play/Pause Apple TV (Apple TV)",
      "TVRemoteUIService.ToggleSystemAppearanceIntent": "Set Light/Dark Mode (Apple TV)",
      "TVRemoteUIService.ReduceLoudSoundsIntent": "Set Reduce Loud Sounds (Apple TV)",
      "TVRemoteUIService.LaunchRemoteIntent": "Show Remote Control (Apple TV)",
      "TVRemoteUIService.SkipContentIntent": "Skip Content on Apple TV (Apple TV)",
      "TVRemoteUIService.SleepAppleTVIntent": "Sleep Apple TV (Apple TV)",
      "TVRemoteUIService.SwitchUserAccountIntent": "Switch User Account (Apple TV)",
      "TVRemoteUIService.WakeAppleTVIntent": "Wake Apple TV (Apple TV)"
    },
    "Calendar": {
      "addnewevent": "Add New Event (Calendar)",
      "setters.calendarevents": "Edit Calendar Event (Calendar)",
      "filter.eventattendees": "Filter Event Attendees (Calendar)",
      "filter.calendarevents": "Filter Calendar Events (Calendar)",
      "properties.calendarevents": " Get Details of Calendar Events (Calendar)",
      "properties.eventattendees": "Get Details of Event Attendees (Calendar)",
      "getupcomingevents": "Get Upcoming Events (Calendar)",
      "removeevents": "Remove Events (Calendar)",
      "showincalendar": "Show in Calendar (Calendar)"
    },
    "Contacts": {
      "addnewcontact": "Add New Contact",
      "contacts": "Contacts",
      "settlers.contacts": "Edit Contact",
      "filter.contacts": "Find Contacts",
      "detect.contacts": "Get Contacts from Input",
      "properties.contacts": "Get Details of Contacts"
    },
    "Phone": {
      "detect.phonenumber": "Get Phone Numbers from Input",
      "phonenumber": "Phone Number",
      "selectcontacts": "Select Contact",
      "selectphone": "Select Phone Number"
    },
    "Health": {
      "filter.health.quantity": "Filter Health Samples (Health)",
      "properties.health.quantity": "Get Details of Health Samples (Health)",
      "health.quantity.log": "Log Health Sample (Health)",
      "health.workout.log": "Log Workout (Health)"
    },
    "Reminders": {
      "addnewreminder": "Add New Reminder (Reminders)",
      "setters.reminders": "Edit Reminder (Reminders)",
      "filter.reminders": "Find Reminders (Reminders)",
      "properties.reminders": "Get Details of Reminders (Reminders)",
      "getupcomingreminders": "Get Upcoming Reminders (Reminders)",
      "removereminders": "Remove Reminders (Reminders)",
      "reminders.showlist": "Show Reminders List (Reminders)"
    },
    "Safari": {
      "readinglist": "Add to Reading List (Safari)",
      "properties.safariwebpage": "Get Details of Safari Web Page (Safari)",
      "openurl": "Open URL (Safari)",
      "runjavascriptonwebpage": "Run JavaScript on Web Page (Safari)",
      "searchweb": "Search Web (Safari)",
      "showwebpage": "Show Web Page (Safari)",
      "filter.articles": "Filter Articles",
      "getarticle": "Get Article Using Safari Reader",
      "properties.article": "Get Details of Article"
    },
    "Messages": {
      "sendmessage": "Send Message (Messages)"
    },
    "Books": {
      "apple.iBooks.openin": "Add PDF in Books (Apple Books)"
    },
    "Files": {
      "unzip": "Extract Archive (Files)",
      "makezip": "Make Archive (Files)",
      "file.append": "Append to File (Files)",
      "file.createfolder": "Create Folder (Files)",
      "file.delete": "Delete File (Files)",
      "documentpicker.open": "Get File (Files)",
      "file.getlink": "Get Link to File (Files)",
      "documentpicker.save": "Save File (Filses)",
      "filter.files": "Filter Files (Files)",
      "properties.files": "Get Details of Files (Files)"
    },
    "Maps, Location, and Weather": {
      "filter.locations": "Filter Locations",
      "getcurrentlocation": "Get Current Location",
      "properties.location": "Get Details of Locations",
      "location": "Location",
      "detect.address": "Get Address from Input (Maps)",
      "address": "Street Address (Maps)",
      "getmapslink": "Get Maps URL (Maps)",
      "getdirections": "Show Directions (Maps)",
      "searchmaps": "Show in Maps (Maps)",
      "ride.requestride": "Request Ride (Maps)",
      "getdistance": "Get Distance (Maps)",
      "gethalfwaypoint": "Get Halfway Point (Maps)",
      "gettraveltime": "Get Travel Time (Maps)",
      "searchlocalbusinesses": "Search Local Businesses (Maps)",
      "weather.currentconditions": "Get Current Weather (Weather)",
      "properties.weather.conditions": "Get Details of Weather Conditions (Weather)",
      "weather.forecast": "Get Weather Forecast (Weather)"
    },
    "iTunes Store/Apple Music": {
      "properties.itunesartist": "Get Details of iTunes Artist (iTunes Store)",
      "properties.itunesstore": "Get Details of iTunes Product (iTunes Store)",
      "searchitunes": "Search iTunes Store (iTunes Store)",
      "showinstore": "Show in iTunes Store (iTunes Store)",
      "filter.music": "Find Music (Apple Music)",
      "getcurrentsong": "Get Current Song (Apple Music)",
      "properties.music": "Get Details of Music (Apple Music)",
      "playmusic": "Play Music (Apple Music)",
      "exportsong": "Select Music (Apple Music)",
      "addtoplaylist": "Add to Playlist (Apple Music)",
      "createplaylist": "Create Playlist (Apple Music)",
      "get.playlist": "Get Playlist (Apple Music)",
      "addmusictoupnext": "Add to Up Next (Apple Music)",
      "clearupnext": "Clear Up Next (Apple Music)"
    },
    "Photos": {
      "delete.photos": "Delete Photos (Photos)",
      "filter.photos": "Find Photos (Photos)",
      "mobileslideshow.StreamShareService": "Post to Shared Album (Photos)",
      "getlatestphotoimport": "Get Last Import (Photos)",
      "getlatestbursts": "Get Latest Bursts (Photos)",
      "getlatestlivephotos": "Get Latest Live Photos (Photos)",
      "getlastphotos": "Get Latest Photos (Photos)",
      "getlastscreenshot": "Get Latest Screenshots (Photos)",
      "getlastvideo": "Get Latest Videos (Photos)",
      "removefromalbum": "Remove from Photo Album (Photos)",
      "savetocameraroll": "Save to Photo Album (Photos)",
      "selectphoto": "Select Photos (Photos)"
    },
    "Playback": {
      "handoffplayback": "Hand Off Playback (Playback)",
      "pausemusic": "Play/Pause (Playback)",
      "seek": "Seek (Playback)",
      "listeningmode.set": "Set Noise Control Mode (Playback)",
      "skipback": "Skip Back (Playback)",
      "skipforward": "Skip Forward (Playback)"
    },
    "Podcasts": {
      "properties.podcastshow": "Get Details of Podcast (Podcasts)",
      "properties.podcast": "Get Details of Podcast Episode (Podcasts)",
      "getepisodesforpodcast": "Get Episodes of Podcast (Podcasts)",
      "getpodcastsfromlibrary": "Get Podcasts from Library (Podcasts)",
      "playpodcast": "Play Podcast (Podcasts)",
      "searchpodcasts": "Search Podcasts (Podcasts)",
      "podcasts.subscribe": "Subscribe to Podcast (Podcasts)"
    },
    "Siri Shortcuts": {
      "sirikit.donation.handle": "Siri Shortcuts Action (Action name cannot be retrieved)",
      "useractivity.open": "Siri Shortcuts action (Action name cannot be retrieved*)",
      "amazon.Amazon": "Amazon action (Action name cannot be retrieved*)"
    },
    "System Functions": {
      "setclipboard": "Copy to Clipboard",
      "getclipboard": "Get Clipboard",
      "avairyeditphoto": "Markup",
      "airdropdocument": "Airdrop",
      "getbatterylevel": "Get Battery Level",
      "getdevicedetails": "Get Device Details",
      "appearance": "Set Appearance",
      "bluetooth.set": "Set Bluetooth",
      "setbrightness": "Set Brightness",
      "dnd.set": "Set Do Not Disturb",
      "flashlight": "Set Flashlight",
      "lowpowermode.set": "Set Low Power Mode",
      "orientationset": "Set Orientation Lock",
      "setplaybackdestination": "Set Playback Destination",
      "setvolume": "Set Volume",
      "wallpaper.set": "Set Wallpaper",
      "getipaddress": "Get IP Address",
      "getwifi": "Get Network Details",
      "airplanemode.set": "Set Airplane Mode",
      "cellulardata.set": "Set Cellular Data",
      "cellular.rat.set": "Set Voice & Data",
      "wifi.set": "Set Wi-Fi",
      "playsound": "Play Sound",
      "alert": "Show Alert",
      "notification": "Show Notification",
      "vibrate": "Vibrate Device",
      "properties.appstore": "Get Details of App Store App",
      "searchappstore": "Search App Store",
      "recordaudio": "Record Audio",
      "shazamit": "Shazam It",
      "takephoto": "Take Photo",
      "takevideo": "Take Video",
      "takescreenshot": "Take Screenshot",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartMagnifierIntent": "Open Magnifier",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAssistiveTouchIntent": "Set AssistiveTouch",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAudioDescriptionsIntent": "Set Audio Descriptions",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleClassicInvertIntent": "Set Classic Invert",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleCaptionsIntent": "Set Closed Captions+SDH",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleContrastIntent": "Set Increase Contrast",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleLEDFlashIntent": "Set LED Flash",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleMonoAudioIntent": "Set Mono Audio",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetSoundDetectorIntent": "Set sound recognizer",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleReduceMotionIntent": "Set Reduce Motion",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleTransparencyIntent": "Set Reduce Transparency",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSmartInvertIntent": "Set Smart Invert",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSoundDetectionIntent": "Set Sound Recognition",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSwitchControlIntent": "Set Switch Control",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetLargeTextIntent": "Set text size",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceControlIntent": "Set Voice Control",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceOverIntent": "Set VoiceOver",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleWhitePointIntent": "Set White Point",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleZoomIntent": "Set Zoom",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartGuidedAccessIntent": "Start Guided Access",
      "apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartSpeakScreenIntent": "Start Speak Screen"
    }
  }
}
